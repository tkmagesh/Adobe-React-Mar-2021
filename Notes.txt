Infrastructure
Powerful Browser

    HTTP Client
    HTML Document Renderer
   
   Virtual OS (HTML5)
        Data Storage
            LocalStorage
            SessionStorage
            IndexedDB
            WebSQL (obsolete)
        File System
            File System API
        Multithreading Capabilities
            WebWorkers
        Interprocess communication
            Server Sent Events
            WebSockets
            WebRTC (p2p)
        Application Host
            Service Workers

Salary = Basic + HRA + DA - Tax 


ES6 (ECMAScript 6 / ES2015 / ESNext) (2015)

JavaScript (ES5)
    Datatypes
        number, boolean, string, undefined, object, function
    Programming Constructs
        var, if else, switch case default, for, while, try catch finally, function
    APIs
        Math, Array, RegEx, Error, timer (setTimeout, clearTimeout, setInterval, clearInterval), Date

ES6 Feachers
    1. let
        var (IS NOT block scoped)
    2. const
    3. Array Destructuring
    4. Rest operator (Array)
    5. Spread Operator (Array)

        function add(...args){
            let [first, ...remaining] = args;
            return args.length <= 1 ? first : first + add(...remaining);
        }

    6. Object Destructuring
    7. Rest operator (Object)
    8. Spread Operator (Object)
    9. default arguments
    10. arrow functions
    11. object construction enhancements
    12. Symbol
    13. template string 
    14. iterators
    15. generator
    16. class   

http://es6-features.org

var spinner = /* .... */
// up(), down()

spinner.up() //=> 1
spinner.up() //=> 2
spinner.up() //=> 3
spinner.up() //=> 4

spinner.down() //=> 3
spinner.down() //=> 2
spinner.down() //=> 1
spinner.down() //=> 0
spinner.down() //=> -1

NOTE : there should NO WAY the user of the spinner object can influence the outcome of up() and down() from outside

spinner.counter = 10000
spinner.up() //=> SHOULD NOT return 10001

var spinner = (function(){
    var counter = 0;

    function up(){
        return ++counter;
    }

    function down(){
        return --counter;
    }

    return { up, down }

})();


function Spinner(){
    this.counter = 0;
}
Spinner.prototype.up = function(){
    return ++this.counter;
}
Spinner.prototype.down = function(){
    return --this.counter;
}



var Spinner = (function(){
    var counterSymbol = Symbol('counter')
    
    function Spinner(){
        this[counterSymbol] = 0;
    }
    Spinner.prototype.up = function(){
        return ++this[counterSymbol];
    }
    Spinner.prototype.down = function(){
        return --this[counterSymbol];
    }

    return Spinner;
})();

class Product {
    id = 0;
    name = ''
    cost = 0;

    constructor(id , name, cost){
        this.id = id;
        this.name = name;
        this.cost = cost;
    }

    display(){
        console.log(`id = ${this.id}, name = ${this.name}, cost = ${this.cost}`)
    }

}

class DiscountedProduct extends Product {
    discount = 0;
    constructor(id , name, cost, discount){
        super(id, name, cost);
        this.discount = discount;
    }
    display(){
        console.log(`id = ${this.id}, name = ${this.name}, cost = ${this.cost}, discount=${this.discount}`)
    }
}

Tools 
======
1. Visual Studio Code (http://code.visualstudio.com)
2. Chrome Browser
3. Node.js (LTS version) (http://nodejs.org)

Day-3 Agenda
TypeScript
    Need
    Features
        typesafe code
        Access control modifiers
        Interfaces
        Enums
        Typed Functions
        Classes
        Generics
    Demo : typescript

React
Virtual DOM
Components
    Presentation
    State
    User Interaction Resonsibilities


TypeScript
    JavaScript is loosely typed

int x;
x = 100;
x = "string"

var x;

function add(x,y){
    return x + y;
}

add(10,20)
add(10, '20')
add(10, 'abc')
add([10,20], [30,40])
add([10,20], [30,'40'])
add([10,20], [[30,'40'],'abc'])

function add(x,y){
    if (typeof x !== 'number' || typeof y !== 'number')
        throw new Error('Invalid argument(s)')
    return x + y;
}

function add(...args){
    funtion parseArg(n){
        if (Array.isArray(n)) return add(...n);
        return isNaN(n) ? 0 : parseInt(n, 10);
    }
    return args.length <= 1 ? parseArg(args[0]) : parseArg(args[0]) + add(args.slice(1));
}


Typescript is a superset of JavaScript

let x : number = 10;

function add(x : number,y : number) : number {
    return x + y;
}

add(10, 'abc')

    |
    |
    V
typescript compiler
    |
    |
    V
let x  = 10;

function add(x ,y)  {
    return x + y;
}

let isEven = (x : number) : boolean => x % 2 == 0

class Employee{
    public id : number = 0;
    public name : string = '';
    public doj : Date = new Date();
    public city : string = '';
}

class Department{
    public id : number = 0;
    public name : string = ''
}

let emp : Employee = new Employee();
emp.id = 100

interface Identity{
    id : number
    name : string
}

function print(obj : Identity){
    console.log(obj.id, obj.name);
}

let emp : Employee = new Employee();
print(emp)


Yarn
    package manager for node.js


Assignment
    Array methods
        forEach, filter, map, reduce

Day-04
    JSX
    React components
        Presentation
        UI Behavior
        State
    Component Composition
        Component Communication


Transpiler
    Used to convert the application code from one version of the language to another version of the same language

    Babel (http://babeljs.io)
        ES6 -> ES5
        JSX -> JS


HTML & JSX
HTML - Open tags without close tags are allowed
JSX - Every open tag must have the corresponding close tag

HTML - 'class' attribute is allowed
JSX - Use 'className' (in place of 'class')

HTML - 'for' attribute is allowed
JSX - Use 'htmlFor' (in place of 'for')

React Component
    Encapsulation of Presentation + User Interaction Logic + State
    Easy to maintain
    Reusable

    Can be a class OR a function

Day-06
    1. Dynamically create a list
    2. Functional components
    3. React hooks
    4. Problem solving (precursor for state manager)


React Hooks
    Functions to handle side effects in Functional Components
        State
        Life cycle events
        Ref to dom node
    Hook functions must start with 'use'
    Builtin hooks
        useState
        useEffect
        useRef
        useReducer
        useMemo
        useCallback

Pure Functions
    A function is called as a pure function, if the function invocation can be replaced with the result of the function without affecting the final outcome.

Assignment
    Convert the SalaryCalculator & Products into functional components
    
State Manager
    Architecture
    Roles of Store, Reducer, Actions, ActionCreators
    Create a state manager
    Solve a simple problem using State Manager

State
    UI State
        Any data that supports the presentation needs of the component
        It is highly unlikely that this data is needed in other parts of the application
        Feel free to maintain in the component state

    Application State
        Any data that supports the core application logic
        It is high likely that this data is needed in other parts of the application
        DO NOT maintain this data in the component state

create-react-app
    1. Transpilation of JS
            ES6 -> ES5
            JSX -> JS
    2. Bundle the JS files
    3. Minify the JS files
    4. Uglify the JS files
    5. Hashing of JS files
    6. Compile SASS/SCSS/LESS -> css
    7. Bundle the CSS files
    8. Minify the css files
    9. Hashing of CSS files
    10. Update the index.html with references to the newly generated JS and CSS files

Grunt / Gulp / Webpack

Using create-react-app
    npx create-react-app <app-name>
        (OR)
    yarn create react-app <app-name>

Module Systems in JS
    AMD (Asynchronous Module Definition)
    CommonJS

ES6 Modules
    Everything defined in a JS/JSX/TS file is considered private by default
    Any public entity in a file has to be explicitly 'exported'
    To use any public entity from other JS files, they have to be explicitly 'imported'


src/
    /bugs
        /actions
        /reducers
        /components
        index.js
    /projects
        /actions
        /reduers
        /components
        index.js
    /reducers
        index.js (creation of root reducer)
    /store
        index.js (creation of the store)
    index.js


react-redux
    adapter library to brige between react and redux
    - connect
    - Provider

Assignment : Associate the newly created bugs to any of the projects

the only place where the whole store state is accessible is mapStateToProps

Middlewares
    Any application logic that need to be applied across the actions can be implemented as a middleware

    